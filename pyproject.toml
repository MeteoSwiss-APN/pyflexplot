[build-system]
requires = [
    "setuptools>=65",
    "wheel>=0.38",
]
build-backend = "setuptools.build_meta"

[project]
name = "pyflexplot"
version = "1.1.1"
description = "PyFlexPlot - Visualize and post-process FLEXPART dispersion simulation results stored in NetCDF format"
readme = "README.md"
keywords = [
    "Dispersion",
    "Flexpart",
    "COSMO",
    "mapping",
    "visualization",
]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
]
requires-python = ">=3.10"
authors = [
    {name="Stefan Ruedisuehli", email="stefan.ruedisuehli@env.ethz.ch"},
]

[project.urls]
source = "https://github.com/MeteoSwiss-APN/pyflexplot"
documentation = "https://github.io/MeteoSwiss-APN/pyflexplot"

[project.scripts]
# Format: <command> = "<package>.<module>:<function>"
# pyflexplot = "pyflexplot.cli:main"
pyflexplot  = "pyflexplot.cli.cli:cli"
pytrajplot  = "pytrajplot.cli:cli"
crop-netcdf = "srtools.crop_netcdf:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = [
    "-s",
    "-ra",
    "--pdbcls=IPython.terminal.debugger:TerminalPdb",
	"--tb=short",
    # "--cov=pyflexplot",
    # "--mypy",
]

[tool.black]

[tool.isort]
default_section = "THIRDPARTY"
profile = "black"
force_single_line = true
order_by_type = false
# Set `multi_line_output = 7` to mark too long lines with `# NOQA` (uppercase!)
# instead of spreading them over multiple lines. This leaves lines with long
# trailing comments intact, which may occur if multiple directives are necessary
# (e.g., `# type: ignore [import]  # pylint: disable=no-name-in-module`).
# (Note that thanks to `force_single_line = true`, this should be the main
# reason for too long lines because multi-import lines are already broken up.)
multi_line_output = 7  # 7=noqa
# Headings
import_heading_stdlib = "Standard library"
import_heading_thirdparty = "Third-party"
import_heading_firstparty = "First-party"
import_heading_localfolder = "Local"
# Known modules to avoid misclassification
known_standard_library = [
    # Add standard library modules that may be misclassified by isort
]
known_third_party = [
    # Add third-party modules that may be misclassified by isort
]
known_first_party = [
    # Add first-party modules that may be misclassified by isort
    "pyflexplot",
    "srtools",
    "srutils",
    "words",
]

[tool.mypy]

[[tool.mypy.overrides]]
# Note: Only globally ignore missing imports as a matter of last resort!
# See https://blog.wolt.com/engineering/2021/09/30/professional-grade-mypy-configuration/
module = [
    # Add external modules w/o type hints here
    # Todo: replace by "type: ignore [import]" directives in code
    "cartopy.*",
    "click.*",
    "geopy.*",
    "IPython.*",
    "matplotlib.*",
    "netCDF4.*",
    "PyPDF2.*",
    "scipy.*",
    "shapely.*",
    "tomlkit.*",
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
# max-complexity = 10
ignore = [
    "E203", # Allow whitespace before ':' (https://github.com/PyCQA/pycodestyle/issues/373)
    "F811", # Allow redefinition of unused name (necessary for typing.overload)
    "I002", # Don't check for isort configuration
    "W503", # Allow line break before binary operator (PEP 8-compatible)
]
per-file-ignores = [
    "__init__.py: F401",  # Allow unused imports
]

[tool.pylint]
recursive = true
ignore-imports = true
max-line-length = 88
# Tweak valid name formats
# Defaults (http://pylint-messages.wikidot.com/messages:c0103):
#  argument-rgx  = "^[a-z_][a-z0-9_]{2,30}$"
#  attr-rgx      = "^[a-z_][a-z0-9_]{2,30}$"
#  function-rgx  = "^[a-z_][a-z0-9_]{2,30}$"
#  method-rgx    = "^[a-z_][a-z0-9_]{2,30}$"
#  variable-rgx  = "^[a-z_][a-z0-9_]{2,30}$"
#  class-rgx     = "^[A-Z_][a-zA-Z0-9]+$"
#  const-rgx     = "^(([A-Z_][A-Z0-9_]*)|(__.*__))$"
#  module-rgx    = "^(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
argument-rgx  = "^[a-z_][a-z0-9_]{,40}$"
attr-rgx      = "^[a-z_][a-z0-9_]{,40}$"
function-rgx  = "^[a-z_][a-z0-9_]{,40}$"
method-rgx    = "^[a-z_][a-z0-9_]{,40}$"
variable-rgx  = "^[a-z_][a-z0-9_]{,40}$"
class-rgx     = "^[A-Z_][a-zA-Z0-9]+$"
const-rgx     = "^(([a-z_][a-z0-9_]*)|([A-Z_][A-Z0-9_]*)|(__[a-zA-Z0-9]+__))$"
module-rgx    = "^(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$"
inlinevar-rgx = "^[A-Za-z_][A-Za-z0-9_]*$"
# Disable selected warnings, errors etc. that conflict with style guide etc.
# Note: To locally ignore certain errors, use "pylint: disable=XXXX" comments instead!
disable = [
    "C0115", # Missing class docstring
    "C0116", # Missing function or method docstring
    "R0903", # Too few public methods (*/2) (too-few-public-methods)
    # "R0801", # Similar lines in 2 files (duplicate-code)
    # -> see https://github.com/PyCQA/pylint/issues/214
    "R1705", # Unnecessary "elif" after "return" (no-else-return)
    "R1720", # Unnecessary "elif" after "raise" (no-else-raise)
    "R1724", # Unnecessary "elif" after "continue" (no-else-continue)
    "W1116", # Second argument of isinstance is not a type (isinstance-second-argument-not-valid-type)
    # Migrated from old blueprint, check if still needed
    "W0602", # Using global for '...' but no assignment is done (global-variable-not-assigned)
    "E0401", # Unable to import '...' (import-error)
    # -> Wrongly triggered for relative imports (pylint v2.11.1, 2022-03-09)
    # -> TODO Re-enable once fixed (see https://github.com/PyCQA/pylint/issues/3651)
    "C0330", # Wrong hanging indentation before block (add 4 spaces)
    "R0801", # Similar lines in 2 files (duplicate-code)
]
# Ignore (sub-)modules that trigger errors like E1101 (no-member) or E0611 (no-name-in-module)
#ignored-modules = [
#    # Migrated from old blueprint, todo: replace by pylint disable directives in code
#    "cartopy",  # E1101 (no-member) (PlateCarree)
#    "netCDF4",  # E1101 (no-member)
#]

[tool.pydocstyle]
# All codes: http://www.pydocstyle.org/en/stable/error_codes.html
ignore = [
    # "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    # "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    # "D105", # Missing docstring in public nested class
    # "D107", # Missing docstring in __init__
    "D203", # Blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "D405", # Section name should be properly capitalized
    "D406", # Section name should end with a newline
    "D407", # Missing dashed underline after section
]

[tool.rstcheck]
ignore_directives = [
    "automodule",
    "mdinclude",
]

[tool.codespell]
ignore-words-list = "ende,ue,fo,activ,nd,feld,nd"
skip = "requirements/*,*.pdf,environment.yml"
